/* Auto-generated by genmsg_cpp for file /home/haikalpribadi/Workspace/ROS/radiophonic/audiogesture/msg/Strings.msg */
#ifndef AUDIOGESTURE_MESSAGE_STRINGS_H
#define AUDIOGESTURE_MESSAGE_STRINGS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace audiogesture
{
template <class ContainerAllocator>
struct Strings_ {
  typedef Strings_<ContainerAllocator> Type;

  Strings_()
  : args()
  {
  }

  Strings_(const ContainerAllocator& _alloc)
  : args(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _args_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  args;


  typedef boost::shared_ptr< ::audiogesture::Strings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audiogesture::Strings_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Strings
typedef  ::audiogesture::Strings_<std::allocator<void> > Strings;

typedef boost::shared_ptr< ::audiogesture::Strings> StringsPtr;
typedef boost::shared_ptr< ::audiogesture::Strings const> StringsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::audiogesture::Strings_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::audiogesture::Strings_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace audiogesture

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::audiogesture::Strings_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::audiogesture::Strings_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::audiogesture::Strings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "80df8955b7d65a9ccaa8145f1d8b2f01";
  }

  static const char* value(const  ::audiogesture::Strings_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x80df8955b7d65a9cULL;
  static const uint64_t static_value2 = 0xcaa8145f1d8b2f01ULL;
};

template<class ContainerAllocator>
struct DataType< ::audiogesture::Strings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/Strings";
  }

  static const char* value(const  ::audiogesture::Strings_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::audiogesture::Strings_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] args\n\
\n\
";
  }

  static const char* value(const  ::audiogesture::Strings_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::audiogesture::Strings_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.args);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Strings_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::audiogesture::Strings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::audiogesture::Strings_<ContainerAllocator> & v) 
  {
    s << indent << "args[]" << std::endl;
    for (size_t i = 0; i < v.args.size(); ++i)
    {
      s << indent << "  args[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.args[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUDIOGESTURE_MESSAGE_STRINGS_H

