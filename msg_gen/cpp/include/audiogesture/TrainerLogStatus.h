/* Auto-generated by genmsg_cpp for file /home/haikalpribadi/Workspace/ROS/radiophonic/audiogesture/msg/TrainerLogStatus.msg */
#ifndef AUDIOGESTURE_MESSAGE_TRAINERLOGSTATUS_H
#define AUDIOGESTURE_MESSAGE_TRAINERLOGSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace audiogesture
{
template <class ContainerAllocator>
struct TrainerLogStatus_ {
  typedef TrainerLogStatus_<ContainerAllocator> Type;

  TrainerLogStatus_()
  : name()
  , status()
  {
  }

  TrainerLogStatus_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , status(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;


  typedef boost::shared_ptr< ::audiogesture::TrainerLogStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audiogesture::TrainerLogStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TrainerLogStatus
typedef  ::audiogesture::TrainerLogStatus_<std::allocator<void> > TrainerLogStatus;

typedef boost::shared_ptr< ::audiogesture::TrainerLogStatus> TrainerLogStatusPtr;
typedef boost::shared_ptr< ::audiogesture::TrainerLogStatus const> TrainerLogStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::audiogesture::TrainerLogStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::audiogesture::TrainerLogStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace audiogesture

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::audiogesture::TrainerLogStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::audiogesture::TrainerLogStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::audiogesture::TrainerLogStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7e1e90d83383404e6cc132313b4f1148";
  }

  static const char* value(const  ::audiogesture::TrainerLogStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7e1e90d83383404eULL;
  static const uint64_t static_value2 = 0x6cc132313b4f1148ULL;
};

template<class ContainerAllocator>
struct DataType< ::audiogesture::TrainerLogStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/TrainerLogStatus";
  }

  static const char* value(const  ::audiogesture::TrainerLogStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::audiogesture::TrainerLogStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
string status\n\
\n\
";
  }

  static const char* value(const  ::audiogesture::TrainerLogStatus_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::audiogesture::TrainerLogStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrainerLogStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::audiogesture::TrainerLogStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::audiogesture::TrainerLogStatus_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUDIOGESTURE_MESSAGE_TRAINERLOGSTATUS_H

