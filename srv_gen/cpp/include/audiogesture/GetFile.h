/* Auto-generated by genmsg_cpp for file /home/haikalpribadi/Workspace/ROS/radiophonic/audiogesture/srv/GetFile.srv */
#ifndef AUDIOGESTURE_SERVICE_GETFILE_H
#define AUDIOGESTURE_SERVICE_GETFILE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace audiogesture
{
template <class ContainerAllocator>
struct GetFileRequest_ {
  typedef GetFileRequest_<ContainerAllocator> Type;

  GetFileRequest_()
  : name()
  {
  }

  GetFileRequest_(const ContainerAllocator& _alloc)
  : name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;


  typedef boost::shared_ptr< ::audiogesture::GetFileRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audiogesture::GetFileRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetFileRequest
typedef  ::audiogesture::GetFileRequest_<std::allocator<void> > GetFileRequest;

typedef boost::shared_ptr< ::audiogesture::GetFileRequest> GetFileRequestPtr;
typedef boost::shared_ptr< ::audiogesture::GetFileRequest const> GetFileRequestConstPtr;



template <class ContainerAllocator>
struct GetFileResponse_ {
  typedef GetFileResponse_<ContainerAllocator> Type;

  GetFileResponse_()
  : file()
  {
  }

  GetFileResponse_(const ContainerAllocator& _alloc)
  : file(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _file_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  file;


  typedef boost::shared_ptr< ::audiogesture::GetFileResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audiogesture::GetFileResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetFileResponse
typedef  ::audiogesture::GetFileResponse_<std::allocator<void> > GetFileResponse;

typedef boost::shared_ptr< ::audiogesture::GetFileResponse> GetFileResponsePtr;
typedef boost::shared_ptr< ::audiogesture::GetFileResponse const> GetFileResponseConstPtr;


struct GetFile
{

typedef GetFileRequest Request;
typedef GetFileResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetFile
} // namespace audiogesture

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::audiogesture::GetFileRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::audiogesture::GetFileRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::audiogesture::GetFileRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c1f3d28f1b044c871e6eff2e9fc3c667";
  }

  static const char* value(const  ::audiogesture::GetFileRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc1f3d28f1b044c87ULL;
  static const uint64_t static_value2 = 0x1e6eff2e9fc3c667ULL;
};

template<class ContainerAllocator>
struct DataType< ::audiogesture::GetFileRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/GetFileRequest";
  }

  static const char* value(const  ::audiogesture::GetFileRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::audiogesture::GetFileRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
\n\
";
  }

  static const char* value(const  ::audiogesture::GetFileRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::audiogesture::GetFileResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::audiogesture::GetFileResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::audiogesture::GetFileResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e5aa404286053ca7f6cc32f23f37b85d";
  }

  static const char* value(const  ::audiogesture::GetFileResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe5aa404286053ca7ULL;
  static const uint64_t static_value2 = 0xf6cc32f23f37b85dULL;
};

template<class ContainerAllocator>
struct DataType< ::audiogesture::GetFileResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/GetFileResponse";
  }

  static const char* value(const  ::audiogesture::GetFileResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::audiogesture::GetFileResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string file\n\
\n\
\n\
";
  }

  static const char* value(const  ::audiogesture::GetFileResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::audiogesture::GetFileRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetFileRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::audiogesture::GetFileResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.file);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetFileResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<audiogesture::GetFile> {
  static const char* value() 
  {
    return "65741e102dfdf1ce689c0b8ed7c755c0";
  }

  static const char* value(const audiogesture::GetFile&) { return value(); } 
};

template<>
struct DataType<audiogesture::GetFile> {
  static const char* value() 
  {
    return "audiogesture/GetFile";
  }

  static const char* value(const audiogesture::GetFile&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<audiogesture::GetFileRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "65741e102dfdf1ce689c0b8ed7c755c0";
  }

  static const char* value(const audiogesture::GetFileRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<audiogesture::GetFileRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/GetFile";
  }

  static const char* value(const audiogesture::GetFileRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<audiogesture::GetFileResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "65741e102dfdf1ce689c0b8ed7c755c0";
  }

  static const char* value(const audiogesture::GetFileResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<audiogesture::GetFileResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/GetFile";
  }

  static const char* value(const audiogesture::GetFileResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // AUDIOGESTURE_SERVICE_GETFILE_H

