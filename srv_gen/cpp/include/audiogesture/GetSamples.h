/* Auto-generated by genmsg_cpp for file /home/haikalpribadi/Workspace/ROS/radiophonic/audiogesture/srv/GetSamples.srv */
#ifndef AUDIOGESTURE_SERVICE_GETSAMPLES_H
#define AUDIOGESTURE_SERVICE_GETSAMPLES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace audiogesture
{
template <class ContainerAllocator>
struct GetSamplesRequest_ {
  typedef GetSamplesRequest_<ContainerAllocator> Type;

  GetSamplesRequest_()
  {
  }

  GetSamplesRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::audiogesture::GetSamplesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audiogesture::GetSamplesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetSamplesRequest
typedef  ::audiogesture::GetSamplesRequest_<std::allocator<void> > GetSamplesRequest;

typedef boost::shared_ptr< ::audiogesture::GetSamplesRequest> GetSamplesRequestPtr;
typedef boost::shared_ptr< ::audiogesture::GetSamplesRequest const> GetSamplesRequestConstPtr;



template <class ContainerAllocator>
struct GetSamplesResponse_ {
  typedef GetSamplesResponse_<ContainerAllocator> Type;

  GetSamplesResponse_()
  : samples()
  {
  }

  GetSamplesResponse_(const ContainerAllocator& _alloc)
  : samples(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _samples_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  samples;


  typedef boost::shared_ptr< ::audiogesture::GetSamplesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audiogesture::GetSamplesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetSamplesResponse
typedef  ::audiogesture::GetSamplesResponse_<std::allocator<void> > GetSamplesResponse;

typedef boost::shared_ptr< ::audiogesture::GetSamplesResponse> GetSamplesResponsePtr;
typedef boost::shared_ptr< ::audiogesture::GetSamplesResponse const> GetSamplesResponseConstPtr;


struct GetSamples
{

typedef GetSamplesRequest Request;
typedef GetSamplesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetSamples
} // namespace audiogesture

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::audiogesture::GetSamplesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::audiogesture::GetSamplesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::audiogesture::GetSamplesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::audiogesture::GetSamplesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::audiogesture::GetSamplesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/GetSamplesRequest";
  }

  static const char* value(const  ::audiogesture::GetSamplesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::audiogesture::GetSamplesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::audiogesture::GetSamplesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::audiogesture::GetSamplesRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::audiogesture::GetSamplesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::audiogesture::GetSamplesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::audiogesture::GetSamplesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a8d910579e9f95e2aed1c37cdce948ee";
  }

  static const char* value(const  ::audiogesture::GetSamplesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa8d910579e9f95e2ULL;
  static const uint64_t static_value2 = 0xaed1c37cdce948eeULL;
};

template<class ContainerAllocator>
struct DataType< ::audiogesture::GetSamplesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/GetSamplesResponse";
  }

  static const char* value(const  ::audiogesture::GetSamplesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::audiogesture::GetSamplesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] samples\n\
\n\
\n\
";
  }

  static const char* value(const  ::audiogesture::GetSamplesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::audiogesture::GetSamplesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetSamplesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::audiogesture::GetSamplesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.samples);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetSamplesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<audiogesture::GetSamples> {
  static const char* value() 
  {
    return "a8d910579e9f95e2aed1c37cdce948ee";
  }

  static const char* value(const audiogesture::GetSamples&) { return value(); } 
};

template<>
struct DataType<audiogesture::GetSamples> {
  static const char* value() 
  {
    return "audiogesture/GetSamples";
  }

  static const char* value(const audiogesture::GetSamples&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<audiogesture::GetSamplesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a8d910579e9f95e2aed1c37cdce948ee";
  }

  static const char* value(const audiogesture::GetSamplesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<audiogesture::GetSamplesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/GetSamples";
  }

  static const char* value(const audiogesture::GetSamplesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<audiogesture::GetSamplesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a8d910579e9f95e2aed1c37cdce948ee";
  }

  static const char* value(const audiogesture::GetSamplesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<audiogesture::GetSamplesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/GetSamples";
  }

  static const char* value(const audiogesture::GetSamplesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // AUDIOGESTURE_SERVICE_GETSAMPLES_H

