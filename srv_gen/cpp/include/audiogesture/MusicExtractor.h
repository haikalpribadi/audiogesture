/* Auto-generated by genmsg_cpp for file /home/haikalpribadi/Workspace/ROS/radiophonic/audiogesture/srv/MusicExtractor.srv */
#ifndef AUDIOGESTURE_SERVICE_MUSICEXTRACTOR_H
#define AUDIOGESTURE_SERVICE_MUSICEXTRACTOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace audiogesture
{
template <class ContainerAllocator>
struct MusicExtractorRequest_ {
  typedef MusicExtractorRequest_<ContainerAllocator> Type;

  MusicExtractorRequest_()
  : args()
  {
  }

  MusicExtractorRequest_(const ContainerAllocator& _alloc)
  : args(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _args_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  args;


  typedef boost::shared_ptr< ::audiogesture::MusicExtractorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audiogesture::MusicExtractorRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MusicExtractorRequest
typedef  ::audiogesture::MusicExtractorRequest_<std::allocator<void> > MusicExtractorRequest;

typedef boost::shared_ptr< ::audiogesture::MusicExtractorRequest> MusicExtractorRequestPtr;
typedef boost::shared_ptr< ::audiogesture::MusicExtractorRequest const> MusicExtractorRequestConstPtr;



template <class ContainerAllocator>
struct MusicExtractorResponse_ {
  typedef MusicExtractorResponse_<ContainerAllocator> Type;

  MusicExtractorResponse_()
  {
  }

  MusicExtractorResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::audiogesture::MusicExtractorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::audiogesture::MusicExtractorResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MusicExtractorResponse
typedef  ::audiogesture::MusicExtractorResponse_<std::allocator<void> > MusicExtractorResponse;

typedef boost::shared_ptr< ::audiogesture::MusicExtractorResponse> MusicExtractorResponsePtr;
typedef boost::shared_ptr< ::audiogesture::MusicExtractorResponse const> MusicExtractorResponseConstPtr;


struct MusicExtractor
{

typedef MusicExtractorRequest Request;
typedef MusicExtractorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MusicExtractor
} // namespace audiogesture

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::audiogesture::MusicExtractorRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::audiogesture::MusicExtractorRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::audiogesture::MusicExtractorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "80df8955b7d65a9ccaa8145f1d8b2f01";
  }

  static const char* value(const  ::audiogesture::MusicExtractorRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x80df8955b7d65a9cULL;
  static const uint64_t static_value2 = 0xcaa8145f1d8b2f01ULL;
};

template<class ContainerAllocator>
struct DataType< ::audiogesture::MusicExtractorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/MusicExtractorRequest";
  }

  static const char* value(const  ::audiogesture::MusicExtractorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::audiogesture::MusicExtractorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] args\n\
\n\
";
  }

  static const char* value(const  ::audiogesture::MusicExtractorRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::audiogesture::MusicExtractorResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::audiogesture::MusicExtractorResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::audiogesture::MusicExtractorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::audiogesture::MusicExtractorResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::audiogesture::MusicExtractorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/MusicExtractorResponse";
  }

  static const char* value(const  ::audiogesture::MusicExtractorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::audiogesture::MusicExtractorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::audiogesture::MusicExtractorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::audiogesture::MusicExtractorResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::audiogesture::MusicExtractorRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.args);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MusicExtractorRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::audiogesture::MusicExtractorResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MusicExtractorResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<audiogesture::MusicExtractor> {
  static const char* value() 
  {
    return "80df8955b7d65a9ccaa8145f1d8b2f01";
  }

  static const char* value(const audiogesture::MusicExtractor&) { return value(); } 
};

template<>
struct DataType<audiogesture::MusicExtractor> {
  static const char* value() 
  {
    return "audiogesture/MusicExtractor";
  }

  static const char* value(const audiogesture::MusicExtractor&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<audiogesture::MusicExtractorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "80df8955b7d65a9ccaa8145f1d8b2f01";
  }

  static const char* value(const audiogesture::MusicExtractorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<audiogesture::MusicExtractorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/MusicExtractor";
  }

  static const char* value(const audiogesture::MusicExtractorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<audiogesture::MusicExtractorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "80df8955b7d65a9ccaa8145f1d8b2f01";
  }

  static const char* value(const audiogesture::MusicExtractorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<audiogesture::MusicExtractorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "audiogesture/MusicExtractor";
  }

  static const char* value(const audiogesture::MusicExtractorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // AUDIOGESTURE_SERVICE_MUSICEXTRACTOR_H

